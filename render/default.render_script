local render_state = require "render.render_state"
local lighting_state = require "lighting.lighting_state"
local update_constants
--
-- message constants
--
local MSG_WINDOW_RESIZED =      hash("window_resized")
local MSG_SET_VIEW_PROJ =       hash("set_view_projection")

local function create_predicates(...)
    local arg = {...}
    local predicates = {}
    for _, predicate_name in pairs(arg) do
        predicates[predicate_name] = render.predicate({predicate_name})
    end
    return predicates
end

local i = vmath.matrix4()
function init(self)
    self.predicates = create_predicates("tile", "gui", "text", "particle", "model", "ice", "sprite", "transparent", "debug_text", "screen")

    self.clear_buffers = {
        [graphics.BUFFER_TYPE_COLOR0_BIT] = vmath.vector4(
            sys.get_config_number("render.clear_color_red", 0),
            sys.get_config_number("render.clear_color_green", 0),
            sys.get_config_number("render.clear_color_blue", 0),
            sys.get_config_number("render.clear_color_alpha", 0)
        ),
        [graphics.BUFFER_TYPE_DEPTH_BIT] = 1,
        [graphics.BUFFER_TYPE_STENCIL_BIT] = 0
    }

    self.camera = {
        frustum = { frustum = vmath.matrix4() },
        view = vmath.matrix4(),
        proj = vmath.matrix4()
    }
    self.camera_gui = {
        view = vmath.matrix4(),
        proj = vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1)
    }
    self.camera_gui.frustum = { frustum = self.camera_gui.proj * self.camera_gui.view }
    self.valid = render.get_window_width() > 0 and render.get_window_height() > 0

    lighting_state.set_ambient_color(vmath.vector4(0.1, 0.1, 0.1, 1.0))
    lighting_state.set_sun_color(vmath.vector4(.7, .7, .7, 1.0))
    lighting_state.set_sun_direction(vmath.normalize(vmath.vector4(1, -1, -1, 1)))

    self.constants = render.constant_buffer()
    update_constants(self.constants)

    render_state.WIDTH = render.get_window_width()
    render_state.HEIGHT = render.get_window_height()

    -- Creating the RT in a render script:
    local color_params = {
        format = graphics.TEXTURE_FORMAT_RGBA,
        width  = render.get_window_width(),
        height = render.get_window_height(),
        flags  = render.TEXTURE_BIT ---@diagnostic disable-line: undefined-field
    }
    local position_params = {
        format = graphics.TEXTURE_FORMAT_RGBA32F,
        width  = render.get_window_width(),
        height = render.get_window_height(),
        flags  = render.TEXTURE_BIT ---@diagnostic disable-line: undefined-field
    }
    local normal_params = {
        format = graphics.TEXTURE_FORMAT_RGBA16F,
        width = render.get_window_width(),
        height = render.get_window_height(),
        flags = render.TEXTURE_BIT ---@diagnostic disable-line: undefined-field
    }
    local depth_params = {
        format = graphics.TEXTURE_FORMAT_DEPTH,
        width  = render.get_window_width(),
        height = render.get_window_height(),
        flags  = render.TEXTURE_BIT ---@diagnostic disable-line: undefined-field
    }

    self.render_target = render.render_target(
        "render_target",
        {
            [graphics.BUFFER_TYPE_COLOR0_BIT] = color_params, -- color
            [graphics.BUFFER_TYPE_COLOR1_BIT] = normal_params, -- normals
            [graphics.BUFFER_TYPE_COLOR2_BIT] = position_params, -- positions
            [graphics.BUFFER_TYPE_DEPTH_BIT]  = depth_params, -- depth
        }
    )
    self.ssao_target = render.render_target(
        "ssao_target",
        {
            [graphics.BUFFER_TYPE_COLOR0_BIT] = color_params, -- color
            [graphics.BUFFER_TYPE_DEPTH_BIT]  = depth_params, -- depth
        }
    )
end

local screen_proj = vmath.matrix4_orthographic(-.5, .5, -.5, .5, -1, 1)
local render_options = {}
local ssao_options = {}
function update(self)
    if not self.valid then return end

    update_constants(self.constants)

    local predicates = self.predicates

    render.set_render_target(self.render_target)
    -- clear screen buffers
    --
    -- turn on depth_mask before `render.clear()` to clear it as well
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear(self.clear_buffers)

    -- setup camera view and projection
    --
    local camera = self.camera
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.set_view(camera.view)
    render.set_projection(camera.proj)

    -- set states used for all the world predicates
    -- render.set_blend_func(graphics.BLEND_FACTOR_SRC_ALPHA, graphics.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA)
    render.enable_state(graphics.STATE_DEPTH_TEST)

    -- render `model` predicate for default 3D material
    -- self.constants.mtx_proj_inv = self.proj_inv or i -- TODO: improve this
    render_options.frustum = camera.frustum.frustum
    render_options.constants = self.constants
    render.enable_state(graphics.STATE_CULL_FACE)
    render.draw(predicates.model, render_options)
    render.draw(predicates.ice, render_options)
    render.disable_state(graphics.STATE_CULL_FACE)
    render.draw(predicates.sprite, render_options)
    render.enable_state(graphics.STATE_CULL_FACE)
    render.draw_debug3d()

    -- disable the depth mask and face culling for things with transparency
    render.set_depth_mask(false)
    -- render.disable_state(render.STATE_CULL_FACE)
    render.set_blend_func(graphics.BLEND_FACTOR_SRC_ALPHA, graphics.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA)
    render.enable_state(graphics.STATE_BLEND)
    render.draw(predicates.transparent, render_options)

    -- render the other components: sprites, tilemaps, particles etc
    --
    render.draw(predicates.tile, render_options)
    render.draw(predicates.particle, render_options)
    render.disable_state(graphics.STATE_DEPTH_TEST)
    render.disable_state(graphics.STATE_CULL_FACE) -- need to disable this to get the debug_text and profiler to show

    render.disable_state(graphics.STATE_STENCIL_TEST)
    render.disable_state(graphics.STATE_BLEND)

    render.set_render_target(self.ssao_target, { transient = { graphics.BUFFER_TYPE_DEPTH_BIT } })
    render.clear(self.clear_buffers)
    render.set_view(i)
    render.set_projection(screen_proj)

    render.enable_material("ssao_material")
    render.enable_texture("color_sampler", self.render_target, graphics.BUFFER_TYPE_COLOR0_BIT)
    render.enable_texture("position_sampler", self.render_target, graphics.BUFFER_TYPE_COLOR1_BIT)
    render.enable_texture("normal_sampler", self.render_target, graphics.BUFFER_TYPE_COLOR2_BIT)
    ssao_options.constants = self.constants
    ssao_options.constants.mtx_proj = camera.proj
    render.draw(predicates.screen, ssao_options)
    render.disable_texture("color_sampler")
    render.disable_texture("position_sampler")
    render.disable_texture("normal_sampler")
    render.disable_material()

    render.set_render_target(render.RENDER_TARGET_DEFAULT)
    -- render.clear(self.clear_buffers)
    -- render.set_view(i)
    -- render.set_projection(screen_proj)
    render.enable_material("screen_material")
    render.enable_texture("render_sampler", self.ssao_target, graphics.BUFFER_TYPE_COLOR0_BIT)
    render.draw(predicates.screen)
    render.disable_texture("render_sampler")
    render.disable_material()

    -- render GUI
    --
    local camera_gui = self.camera_gui
    render_options.frustum = camera_gui.frustum.frustum
    render.set_view(camera_gui.view)
    render.set_projection(camera_gui.proj)
    render.enable_state(graphics.STATE_STENCIL_TEST)
    render.draw(predicates.debug_text, render_options)
    render.draw(predicates.gui, render_options)
    render.draw(predicates.text, render_options)
    render.disable_state(graphics.STATE_STENCIL_TEST)
    render.disable_state(graphics.STATE_BLEND)
end

function on_message(self, message_id, message)
    local camera = self.camera
    local camera_gui = self.camera_gui
    if message_id == MSG_WINDOW_RESIZED then
        camera.frustum.frustum = camera.proj * camera.view
        camera_gui.proj = vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1)
        self.valid = render.get_window_width() > 0 and render.get_window_height() > 0
        render_state.WIDTH = render.get_window_width()
        render_state.HEIGHT = render.get_window_height()
    elseif message_id == MSG_SET_VIEW_PROJ then
        camera.view = message.view
        camera.proj = message.projection or i
        camera.frustum.frustum = camera.proj * camera.view
        render_state.MTX_VIEW = camera.view
        self.proj_inv = vmath.inv(camera.proj)
    end
end

local num_lights = vmath.vector4()
local resolution = vmath.vector4()
update_constants = function(constants)

    constants.ambient_color = lighting_state.get_ambient_color()

    constants.sun_color = lighting_state.get_sun_color()
    constants.sun_direction = lighting_state.get_sun_direction()

    local n = lighting_state.get_num_lights()
    num_lights.x, num_lights.y, num_lights.z, num_lights.w = n, n, n, n
    constants.num_lights = num_lights

    local light_positions, light_radii, light_colors = lighting_state.get_lights()
    constants.light_positions = light_positions
    constants.light_radii = light_radii
    constants.light_colors = light_colors

    constants.kernel = render_state.KERNEL
    constants.noise = render_state.NOISE

    resolution.x = render.get_window_width()
    resolution.y = render.get_window_height()
    constants.resolution = resolution
end